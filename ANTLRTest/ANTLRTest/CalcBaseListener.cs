//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\pret-\Desktop\fa\ANTLRTest\ANTLRTest\Calc.g4 by ANTLR 4.6.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ANTLRTest {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ICalcListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5")]
[System.CLSCompliant(false)]
public partial class CalcBaseListener : ICalcListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>ADDSUB</c>
	/// labeled alternative in <see cref="CalcParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterADDSUB([NotNull] CalcParser.ADDSUBContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ADDSUB</c>
	/// labeled alternative in <see cref="CalcParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitADDSUB([NotNull] CalcParser.ADDSUBContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>MUTDIV</c>
	/// labeled alternative in <see cref="CalcParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMUTDIV([NotNull] CalcParser.MUTDIVContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MUTDIV</c>
	/// labeled alternative in <see cref="CalcParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMUTDIV([NotNull] CalcParser.MUTDIVContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>PAR</c>
	/// labeled alternative in <see cref="CalcParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPAR([NotNull] CalcParser.PARContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PAR</c>
	/// labeled alternative in <see cref="CalcParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPAR([NotNull] CalcParser.PARContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>NUMBER</c>
	/// labeled alternative in <see cref="CalcParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNUMBER([NotNull] CalcParser.NUMBERContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NUMBER</c>
	/// labeled alternative in <see cref="CalcParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNUMBER([NotNull] CalcParser.NUMBERContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>VAR</c>
	/// labeled alternative in <see cref="CalcParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVAR([NotNull] CalcParser.VARContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>VAR</c>
	/// labeled alternative in <see cref="CalcParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVAR([NotNull] CalcParser.VARContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CalcParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProg([NotNull] CalcParser.ProgContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalcParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProg([NotNull] CalcParser.ProgContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CalcParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStat([NotNull] CalcParser.StatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalcParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStat([NotNull] CalcParser.StatContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CalcParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr([NotNull] CalcParser.ExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalcParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr([NotNull] CalcParser.ExprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CalcParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTerm([NotNull] CalcParser.TermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalcParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTerm([NotNull] CalcParser.TermContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CalcParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFactor([NotNull] CalcParser.FactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalcParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFactor([NotNull] CalcParser.FactorContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace ANTLRTest
